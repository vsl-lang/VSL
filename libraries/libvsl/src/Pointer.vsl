/**
 * A primitive class representing a low-level pointer object. The pointer class
 * is an akward class in the sense it has a bunch of compiler glue to make it
 * functional.
 * 
 * This definition only offers to specify the behavior of _functions_ of Pointer
 * instances. No fields exist because the generated code for `Pointer<id>` is
 * always `(id)*`.
 */
@noinit @unsafe
public class Pointer<T> extends OpaquePointer {

    override public func dereference() -> T llvm {
    define <returnType> <name>(<returnType>*) alwaysinline {
    entry:
        %1 = load <returnType>, <returnType>* %0
        ret %1
    }   
    }
    
    override public func getptr(at: Int64) -> Pointer<T> llvm {
    define <returnType> <name>(i64) alwaysinline {
        %1 = getelementptr <returnType>, <returnType>, i64 %0
        ret %1
    }
    }
    
    // Compile-time attribute which evaluates to the size of the given type. If
    // you do `var a = Pointer<1>.size`. It'll become `var a = 32` in the byte
    // REPL.
    @llvmattribute(alwaysinline)
    static public let size: Int {
        return +
        #if(id("T"), isprimitive)
        # if(id("T"), inherits, Number)
        #  if(id("T"), endswith, 8)
        #   echo "8"
        #  elif(id("T"), endswith, 16)
        #   echo "16"
        #  elif(id("T"), endswith, 64)
        #   echo "64"
        #  else
        #   echo intsize
        #  endif
        # elif(id("T"), inherits, OpaquePointer)
        #  echo sub("x(\d+)", arch, "$0")
        # endif
        #else
        # echo mult(structsize(id("T")), "8")
        #endif
    }
    
}